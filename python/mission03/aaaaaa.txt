

프로세스간 독립성을 가지


self.ds.dummysensor


thread를 사용해서  동시에 처리하는걸 구현가능!?

while 문을 사용해서 


센서는 ㄴ대ㅗ ㅗ 


ds = DummySensor(env_values)

# MissionComputer 객체 생성
RunComputer = MissionComputer(env_values)

	
#ds.set_env()
RunComputer.get_sensor_data(ds, interval=20, ave_interval_min = 1)
			           ㄴ 20초 뒤에   
			    ㄴ 클래스를 걍 인자로 받음 = 클래스 변수?!




# 환경 변수 범위 설정 (class 변수)
env_values = {
    "mars_base_internal_temperature": [(18, 30.5), 18, 0, '도'],
    "mars_base_external_temperature": [(0, 21), 0, 0, '도'],
    "mars_base_internal_humidity": [(50, 60), 50, 0, '%'],
    "mars_base_external_illuminance": [(500, 715), 500, 0, 'W/m2'],
    "mars_base_internal_co2": [(0.02, 0.1), 0.02, 0, '%'],
    "mars_base_internal_oxygen": [(4, 7), 4, 0, '%']
}
	변수를 미리 리스트로 만들어서 실행 속도를 향상시킴

 def set_env(self):
        now_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
        for key in self.env_values :
            self.env_values[key][1] = random.uniform(*self.env_values[key][0]
					   ㄴ 언팩?!


def key_listener(self):
        while True:				-- q 를 입력할떄까지 무한 반복
            key = input()
            if key == 'q':
                print('System Stoped....')
                self.stop_flag = True
                break


 def get_sensor_data(self, ds, interval=10, ave_interval_min = 1) :
        listener_thread = threading.Thread(target=self.key_listener, daemon=True)
							ㄴ   ㄴ 메인이 끝나면 쓰레드를 죽임
        listener_thread.start()

ave_values_sec = ave_interval_min * 60
        loop = ave_values_sec // interval
        while not self.stop_flag:
            time.sleep(interval)


json_str = '{\n'
                for key in self.env_values.keys():
                    json_str += f'\t"{key}": {self.env_values[key][2]/loop:.2f},\n'
						  ㄴ  "mars_base_internal_temperature": [(18, 30.5), 18, 0, '도'],	
						  ㄴ                  				      ㄴ 이 부분에 계속해서 값을 누적시킴
								
                    self.env_values[key][2] = 0
                json_str = json_str.rstrip(',\n') + '\n}'


클래스와 인스턴스간 데이터를 어캐 넘길건지

주기값을 변경가능하게 파라미터를 시작할때 넘기게하고.
도중에 다른 작업을 하기 위해서 스레드를 사용해서 
  ㄴ  q를 누를떄까지 계속 기다려야 하므로,,,,


챗gpt를 쓰는건 좋은데...
프로그래머으 의사결정을 잘 해서 만들어야....





@statemethod로 명시적 선언을 해주는 이유는 혼자 개발하는게 아닐때 = 협업할떄 도움을 주기 위함도 잇고

def malloc()


class x(){
      	x.b()= 10    
}

print(x.b) ==>>  10
print(x.a = 100)  ->  x에 b가 없음에도 a에 100이 담겨서 출력가능!?


set dict  순서 없음  - 세그먼트
str list tup  순서 있음 - 컬렉션

tup str dict.key set.member  수정 불가!?
                
파이썬도 키랑 값이 무수히 많으면 해쉬로 찾을수잇음

map( , 함수() ) == 요소 전부에 함수 적용
           ㄴ 함수 직접정의 하면 복잡하니  lambda 사용
           ㄴ lmbd x : x+1 = 다 1을 더해줌
           ㄴ  "       : x > 5 = 5 이상인것만 꾸러미로 묶음!?

filter( , 함수() ) 
	 ㄴ 이게 트루인것만 끄집어냄


맵과 필터 함수로 해싱을 구현....


퍼브릭, 프라ㅣ빗,
변수, 메소드
@스타틱메소드, @크래스메소드
 이것들을 왜써야 하는지 생각해보셈.



유지보수?
코드 안에 직접 데이터 때려넣음 하드코딩!? == 절대 안댐??!


















